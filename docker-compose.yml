services:
  # AutoCodeWeb 前端服务 (开发环境)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile # Uses the new dev Dockerfile
    container_name: app-maker-frontend-dev
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - dev-network

  # AutoCodeWeb 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: app-maker-backend-dev
    ports:
      - "8098:8080"
    environment:
      - APP_ENVIRONMENT=development
      - LOG_LEVEL=debug
      - DATABASE_HOST=postgres
      - REDIS_HOST=redis
    volumes:
      - ./backend/configs:/app/configs:ro
      - ./backend/logs:/app/logs
      - ./backend/bmad-config:/app/bmad-config
      - app_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - dev-network

  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: app-maker-postgres-dev
    environment:
      POSTGRES_DB: autocodeweb
      POSTGRES_USER: autocodeweb
      POSTGRES_PASSWORD: AutoCodeWeb2024!@#
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U autocodeweb -d autocodeweb"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - dev-network

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: app-maker-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - dev-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local

networks:
  dev-network:
    driver: bridge