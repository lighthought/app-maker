services:
  # Traefik 反向代理
  traefik:
    image: traefik:v3.5
    container_name: traefik-dev
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik-external.yml:/etc/traefik/external.yml:ro
      - ./traefik-data:/data
    networks:
      - app-maker-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN_NAME:-app-maker.localhost}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=admin:$$2y$$10$$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi"

  # AutoCodeWeb 前端服务 (开发环境)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile # Uses the new dev Dockerfile
    container_name: app-maker-frontend-dev
    environment:
      - VITE_API_BASE_URL=/api/v1
      - VITE_API_TIMEOUT=60
    ports:
      - "3000:3000"
    depends_on:
      - backend
      - traefik
    networks:
      - app-maker-network
    labels:
      # 用于 Traefik 服务发现
      - "traefik.enable=true"
      - "traefik.docker.network=app-maker-network"
      # HTTP 相关
      # 使用 HTTP 协议访问前端，将使用 `web`（80端口） 提供服务
      - "traefik.http.routers.frontend-http.entrypoints=web"
      # 并自动跳转至 HTTPS 协议（443端口）
      #- "traefik.http.routers.flare-http.middlewares=redir-https"
      # 默认服务域名为 frontend.app-maker.localhost
      - "traefik.http.routers.frontend-http.rule=Host(`${DOMAIN_NAME:-app-maker.localhost}`)"
      # 服务名称为 frontend-service，使用 3000 端口提供服务
      - "traefik.http.routers.frontend-http.service=app-maker-frontend"
      # 声明服务名称为 frontend-service，使用 3000 端口提供服务
      - "traefik.http.services.app-maker-frontend.loadbalancer.server.scheme=http"
      - "traefik.http.services.app-maker-frontend.loadbalancer.server.port=3000"

  # AutoCodeWeb 后端服务
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    container_name: app-maker-backend-dev
    ports:
      - "8098:8080"
    environment:
      - APP_ENVIRONMENT=development
      - LOG_LEVEL=debug
      - DATABASE_HOST=postgres
      - REDIS_HOST=redis
      - GITLAB_URL=${GITLAB_URL:-git@gitlab}
      - GITLAB_USERNAME=${GITLAB_USERNAME:-john}
      - GITLAB_EMAIL=${GITLAB_EMAIL:-qqjack2012@gmail.com}
      - SSH_KEY_PATH=${SSH_KEY_PATH:-/home/appuser/.ssh/id_rsa}
      - SSH_KNOWN_HOSTS=${SSH_KNOWN_HOSTS:-/home/appuser/.ssh/known_hosts}
      - OLLAMA_URL=${OLLAMA_URL:-http://host.docker.internal:11434}
      - AGENTS_SERVER_URL=${AGENTS_SERVER_URL:-http://host.docker.internal:8088}
    volumes:
      - ./backend/configs:/app/configs:ro
      - ./backend/logs:/app/logs
      - app_data:/app/data
      - ssh_keys:/home/appuser/.ssh
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      traefik:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - app-maker-network
    labels:
      # 用于 Traefik 服务发现
      - "traefik.enable=true"
      - "traefik.docker.network=app-maker-network"
      # HTTP 相关
      - "traefik.http.routers.backend-http.entrypoints=web"
      - "traefik.http.routers.backend-http.rule=Host(`api.${DOMAIN_NAME:-app-maker.localhost}`)"
      - "traefik.http.routers.backend-http.service=app-maker-backend"
      # 添加处理 WebSocket 升级的中间件
      - "traefik.http.routers.backend-http.middlewares=websocket-headers@docker"
      # 声明服务名称为 backend-service，使用 8080 端口提供服务
      - "traefik.http.services.app-maker-backend.loadbalancer.server.scheme=http"
      - "traefik.http.services.app-maker-backend.loadbalancer.server.port=8080"
      
       # 定义中间件本身
      - "traefik.http.middlewares.websocket-headers.headers.customrequestheaders.Upgrade=websocket"
      - "traefik.http.middlewares.websocket-headers.headers.customrequestheaders.Connection=Upgrade"

  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: app-maker-postgres-dev
    environment:
      POSTGRES_DB: autocodeweb
      POSTGRES_USER: autocodeweb
      POSTGRES_PASSWORD: AutoCodeWeb2024!@#
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U autocodeweb -d autocodeweb"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      traefik:
        condition: service_started
    restart: unless-stopped
    networks:
      - app-maker-network

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: app-maker-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    depends_on:
      traefik:
        condition: service_started
    networks:
      - app-maker-network  
  
  # GitLab CE 代码仓库
  gitlab:
    image: gitlab/gitlab-ce:latest
    container_name: app-maker-gitlab-dev
    restart: unless-stopped
    ports:
      - "8443:443"  # HTTPS
      - "8880:80"   # HTTP
      - "8822:22"   # SSH
    volumes:
      - gitlab_config:/etc/gitlab
      - gitlab_data:/var/opt/gitlab
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://gitlab.${DOMAIN_NAME:-app-maker.localhost}'
        gitlab_rails['gitlab_shell_ssh_port'] = 22
        # 禁用 HTTPS 重定向，因为我们在 Traefik 后面
        nginx['redirect_http_to_https'] = false
        nginx['listen_port'] = 80
        # 添加以下配置
        postgresql['shared_buffers'] = "256MB"
        postgresql['max_connections'] = 200
        gitlab_rails['db_pool'] = 10
        # 禁用不必要的服务以节省资源
        prometheus_monitoring['enable'] = false
        alertmanager['enable'] = false
    labels:
      # 用于 Traefik 服务发现
      - "traefik.enable=true"
      - "traefik.docker.network=app-maker-network"
      # HTTP 相关
      - "traefik.http.routers.gitlab-http.entrypoints=web"
      - "traefik.http.routers.gitlab-http.rule=Host(`gitlab.${DOMAIN_NAME:-app-maker.localhost}`)"
      - "traefik.http.routers.gitlab-http.service=app-maker-gitlab"
      # 声明服务名称为 gitlab-service，使用 80 端口提供服务
      - "traefik.http.services.app-maker-gitlab.loadbalancer.server.scheme=http"
      - "traefik.http.services.app-maker-gitlab.loadbalancer.server.port=80"
    healthcheck:
      test: ["CMD", "gitlab-ctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    depends_on:
      traefik:
        condition: service_started
    networks:
      - app-maker-network
    
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local
  ssh_keys:
    driver: local
  gitlab_config:
    driver: local
  gitlab_data:
    driver: local
  

networks:
  app-maker-network:
    external: true