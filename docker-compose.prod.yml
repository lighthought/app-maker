services:
  # AutoCodeWeb 前端服务 (生产环境 - Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod # Uses the new prod Dockerfile
    container_name: app-maker-frontend-prod
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - prod-network

  # AutoCodeWeb 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: app-maker-backend-prod
    ports:
      - "8080:8080"
    environment:
      - APP_ENVIRONMENT=production
      - APP_SECRET_KEY=${APP_SECRET_KEY}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - LOG_LEVEL=warn
    volumes:
      - ./backend/configs:/app/configs:ro
      - ./backend/logs:/app/logs
      - ./backend/bmad-config:/app/bmad-config
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - prod-network

  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: app-maker-postgres-prod
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - prod-network

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: app-maker-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - prod-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 